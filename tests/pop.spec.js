import { assert } from "chai";

import { MinMaxHeap } from "../index";

describe ("pop", () => {
  it ('should return result of pop(min, small)', () => {
    const mmheap = new MinMaxHeap();

    const input = [4, 6, 1, 2, 7, 3, 5, 9, 8, 10];
    const expected = [10, 7, 6, 8, 9];
    for (let i = 0; i < input.length; i++) {
      mmheap.push(input[i]);
    }
    for (let i = 0; i < input.length / 2; i++) {
      mmheap.popMin();
    }
    assert.equal(mmheap.heap.toString(), expected.toString());
  });

  it ('should return result of pop(max, small)', () => {
    const mmheap = new MinMaxHeap();

    const input = [4, 6, 1, 2, 7, 3, 5, 9, 8, 10];
    const expected = [5, 2, 1, 4, 3];
    for (let i = 0; i < input.length; i++) {
      mmheap.push(input[i]);
    }
    for (let i = 0; i < input.length / 2; i++) {
      mmheap.popMax();
    }
    assert.equal(mmheap.heap.toString(), expected.toString());
  });

  it ('should return result of pop(min, large)', () => {
    const mmheap = new MinMaxHeap();

    const input = [7122, 7905, 8775, 3414, 4657, 1492, 6970, 6547, 2441, 1992, 9137, 1599, 4891, 1153, 4029, 4861, 3316, 8045, 835, 3782, 7129, 4321, 8195, 8171, 9479, 7622, 8476, 8170, 5001, 8469, 2811, 1463, 8308, 8221, 1290, 6249, 607, 120, 2061, 7376, 8890, 9965, 3325, 7538, 1790, 593, 5094, 7864, 5031, 6319, 3232, 696, 41, 5682, 8639, 6646, 7813, 1057, 8782, 328, 4646, 6288, 3652, 310, 3836, 5698, 8430, 8603, 2934, 4285, 1270, 4492, 3663, 3702, 1305, 970, 6537, 6609, 8299, 3112, 6133, 1362, 55, 5225, 9339, 1890, 3151, 5376, 1939, 5867, 8573, 268, 9744, 7090, 954, 9986, 7331, 9866, 9129, 4989];
    const expected = [9986, 5094, 5031, 8890, 9744, 9965, 9137, 5698, 6547, 5225, 5682, 6133, 5376, 6646, 6970, 8476, 8775, 8603, 8299, 9129, 9339, 8573, 9479, 9866, 8171, 7905, 8639, 7813, 8782, 8170, 8430, 7122, 8308, 8469, 6288, 8045, 8221, 7090, 8195, 5867, 6609, 6249, 7129, 7376, 6537, 7538, 6319, 7331, 7622, 7864];
    for (let i = 0; i < input.length; i++) {
      mmheap.push(input[i]);
    }
    for (let i = 0; i < input.length / 2; i++) {
      mmheap.popMin();
    }
    assert.equal(mmheap.heap.toString(), expected.toString());
  });

  it ('should return result of pop(max, large)', () => {
    const mmheap = new MinMaxHeap();

    const input = [7122, 7905, 8775, 3414, 4657, 1492, 6970, 6547, 2441, 1992, 9137, 1599, 4891, 1153, 4029, 4861, 3316, 8045, 835, 3782, 7129, 4321, 8195, 8171, 9479, 7622, 8476, 8170, 5001, 8469, 2811, 1463, 8308, 8221, 1290, 6249, 607, 120, 2061, 7376, 8890, 9965, 3325, 7538, 1790, 593, 5094, 7864, 5031, 6319, 3232, 696, 41, 5682, 8639, 6646, 7813, 1057, 8782, 328, 4646, 6288, 3652, 310, 3836, 5698, 8430, 8603, 2934, 4285, 1270, 4492, 3663, 3702, 1305, 970, 6537, 6609, 8299, 3112, 6133, 1362, 55, 5225, 9339, 1890, 3151, 5376, 1939, 5867, 8573, 268, 9744, 7090, 954, 9986, 7331, 9866, 9129, 4989];
    const expected = [5001, 55, 41, 4861, 4492, 4989, 4646, 310, 607, 120, 268, 1153, 696, 1057, 328, 3316, 3652, 4285, 2061, 3112, 2811, 4321, 1790, 3702, 3782, 4891, 4657, 3836, 3325, 3232, 4029, 1290, 2934, 2441, 1270, 3663, 1305, 835, 970, 1492, 1362, 1463, 1890, 1939, 3414, 593, 954, 1599, 1992, 3151];
    for (let i = 0; i < input.length; i++) {
      mmheap.push(input[i]);
    }
    for (let i = 0; i < input.length / 2; i++) {
      mmheap.popMax();
    }
    assert.equal(mmheap.heap.toString(), expected.toString());
  });

  it ('should return result of pop(min-max, large)', () => {
    const mmheap = new MinMaxHeap();

    const input = [7122, 7905, 8775, 3414, 4657, 1492, 6970, 6547, 2441, 1992, 9137, 1599, 4891, 1153, 4029, 4861, 3316, 8045, 835, 3782, 7129, 4321, 8195, 8171, 9479, 7622, 8476, 8170, 5001, 8469, 2811, 1463, 8308, 8221, 1290, 6249, 607, 120, 2061, 7376, 8890, 9965, 3325, 7538, 1790, 593, 5094, 7864, 5031, 6319, 3232, 696, 41, 5682, 8639, 6646, 7813, 1057, 8782, 328, 4646, 6288, 3652, 310, 3836, 5698, 8430, 8603, 2934, 4285, 1270, 4492, 3663, 3702, 1305, 970, 6537, 6609, 8299, 3112, 6133, 1362, 55, 5225, 9339, 1890, 3151, 5376, 1939, 5867, 8573, 268, 9744, 7090, 954, 9986, 7331, 9866, 9129, 4989];
    const expected = [7864, 2061, 2811, 7122, 7538, 7622, 7813, 2934, 3325, 2441, 3782, 3232, 4657, 3702, 6288, 4861, 6547, 6249, 5698, 5094, 7129, 6537, 7376, 7331, 4989, 5867, 6609, 6970, 5225, 7090, 6319, 3316, 3652, 3836, 4285, 3663, 5376, 4891, 5682, 3112, 4029, 3151, 3414, 6133, 4321, 4646, 6646, 5001, 5031, 4492];
    for (let i = 0; i < input.length; i++) {
      mmheap.push(input[i]);
    }
    for (let i = 0; i < input.length / 4; i++) {
      mmheap.popMin();
      mmheap.popMax();
    }
    assert.equal(mmheap.heap.toString(), expected.toString());
  });
  
});